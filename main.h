#ifndef MAIN_H
#define MAIN_H

#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <gtk/gtk.h>
#include "struttura_dati.h"
#include "funzioni.h"
#include "debug.h"
#include "crittografia.h"
#include "entropy.h"
#include "gen_psw.h"

/**
* @mainpage Password Manager
* @section Introduction Introduction
* The purpose of this project is to make a simple program that stores and manages multiple user and password.
* This program allows to:
* - add different users;
* - add multiple password that you want to keep track;
* - password generator.
*
* All of the function of this program can be used by graphical interface.
*
* @section Features Features
* @subsection Entropy Entropy as measure of password strength
* It is usual in the computer industry to specify password strength in terms of information entropy, measured in bits, a concept from information theory.
* Instead of the number of guesses needed to find the password with certainty, the base-2 logarithm of that number is given, which is the number of "entropy bits" in a password.
* A password with, say, 42 bits of strength calculated in this way would be as strong as a string of 42 bits chosen randomly, say by a fair coin toss.
* Put another way, a password with 42 bits of strength would require 242 attempts to exhaust all possibilities during a brute force search.
* Thus, adding one bit of entropy to a password doubles the number of guesses required, which makes an attacker's task twice as difficult.
* On average, an attacker will have to try half of the possible passwords before finding the correct one.
*
* @subsection PasswordGen Password generator
* Random passwords consist of a string of symbols of specified length taken from some set of symbols using a random selection
* process in which each symbol is equally likely to be selected. The symbols can be individual characters from
* a character set (e.g., the ASCII character set), syllables designed to form pronounceable passwords, or even words from a word list (thus forming a passphrase).
* The strength of random passwords depends on the actual entropy of the underlying number generator;
* however, these are often not truly random, but pseudo random. Many publicly available password generators use random number generators
* found in programming libraries that offer limited entropy. However most modern operating systems offer cryptographically strong
* random number generators that are suitable for password generation. It is also possible to use ordinary dice to generate random passwords.
* See stronger methods. Random password programs often have the ability to ensure that the resulting password complies with a local password policy;
* for instance, by always producing a mix of letters, numbers and special characters.
* For passwords generated by a process that randomly selects a string of symbols of length, L, from a set of N possible symbols, the number
* of possible passwords can be found by raising the number of symbols to the power L, i.e. NL.
* Increasing either L or N will strengthen the generated password. The strength of a random password as measured by the information entropy
* is just the base-2 logarithm or log2 of the number of possible passwords, assuming each symbol in the password is produced independently.
*
* @subsection Hashing Credentials hashing
* Credentials stored into the file have been hashed by sha512
*
* @section Modules Modules
* This project has been divided in the following modules:
* - @b main.h: module that contains all the user-interface interfaces at the GUI level.
* - @b crittografia.h: module that contains all the cryptography function of the program.
* - @b debug.h: module that contains all the debug funcionality of the program.
* - @b entropy.h: module that calculate the entropy of the password
* - @b file.h: module that manages the write and load of the text files.
* - @b funzioni.h: module for the function that the program uses.
* - @b gen_psw.h: module that contains the generate password funcitions.
* - @b struttura_dati.h: module that contains the data structure used by the program.
*
* @author Michele Murgolo
*/

/*
* @var builder:
* @brief pointer to access graphical user interface widgets
*/
static GtkBuilder* builder;

/**
* @var fileListModel
* @brief pointer to GtkListStore which contains the fileListView model
*/
static GtkListStore* fileListModel;

/**
* @brief initialize graphical user interface
*
* @param[in] argc number of arguments
* @param[in] argv array of arguments
*/
void initGUI(int argc, char* argv[]);

/**
* @brief program closing handler
*/
extern "C" gboolean handler_delete_event (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief add user button handler
*/
extern "C" void handler_add_user (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief get master password handler
*/
extern "C" void handler_get_masterPassword (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief show welcome window handler
*/
extern "C" void handler_show_welcome_window (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief get username handler
*/
extern "C" void handler_get_username (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief show main window handler
*/
extern "C" void handler_show_main_window (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief show entry window handler
*/
extern "C" void handler_show_entry (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief ok button in entry window handler
*/
extern "C" void handler_get_entry (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief GtkSwitch in entry window handler
*/
extern "C" void handler_freeze_generatePassword (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief login button handler
*/
extern "C" void handler_show_login (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief ok button in login window handler
*/
extern "C" void handler_get_login (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* GtkLevelBar in master password handler
*/
extern "C" void handler_entropy (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief choose file handler
*/
extern "C" void handler_chooseFile (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief set increment of GtkSpinButton handler
*/
extern "C" void handler_spinButton (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief generate password button handler
*/
extern "C" void handler_generatePassword (GtkWidget *widget, GdkEvent *event, gpointer user_data);

/**
* @brief info button handler
*/
extern "C" void handler_show_credits_window (GtkWidget *widget, GdkEvent *event, gpointer user_data);


/**
* @brief add instance of ::FileInfo to ::fileListModel
*
* @param[in] info pointer to the instance of ::FileInfo to add
*/
void addToFileView(entry_t &values);

/**
* @brief removes all rows from ::fileListModel
*/
void clearFileView();

/**
* @brief removes all rows from ::fileListModel and reinsert data in ::fileList
*/
void reloadFileView();

/**
*	@brief Ritorna l'indice della riga correntemente selezionata nella fileListView
*
* @return Indice della riga selezionata o -1 se nessuna riga Ã¨ selezionata
*/
int getFileViewSelectedRow();



#endif
